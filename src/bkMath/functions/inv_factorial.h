/*
 * MIT License
 *
 * Copyright (c) 2018 Benjamin KÃ¶hler
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#pragma once

#ifndef BKMATH_INV_FACTORIAL_H
#define BKMATH_INV_FACTORIAL_H

#include <bkMath/functions/factorial.h>

namespace bk
{
  //! 1 / factorial(x)
  constexpr double inv_factorial(unsigned int x) noexcept
  {
      switch (x)
      {
          case 0:
          case 1: return 1;
          case 2: return 5e-1;
          case 3: return 1.6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666e-1;
          case 4: return 4.166666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666e-2;
          case 5: return 8.333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e-3;
          case 6: return 1.38888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888e-3;
          case 7: return 1.984126984126984126984126984126984126984126984126984126984126984126984126984126984126984126984126984126e-4;
          case 8: return 2.480158730158730158730158730158730158730158730158730158730158730158730158730158730158730158730158730158730158730158e-5;
          case 9: return 2.755731922398589065255731922398589065255731922398589065255731922398589065255731922398589065255731922398e-6;
          case 10: return 2.75573192239858906525573192239858906525573192239858906525573192239858906525573192239858906525573192239858906525573e-7;
          case 11: return 2.505210838544171877505210838544171877505210838544171877505210838544171877505210838544171877505210838544e-8;
          case 12: return 2.08767569878680989792100903212014323125434236545347656458767569878680989792100903212014323125434236545347656458767e-9;
          case 13: return 1.605904383682161459939237717015494793272571050348828126605904383682161459939237717015494793272571050348e-10;
          case 14: return 1.14707455977297247138516979786821056662326503596344866186136027405868675709945551215392485233755075024916294757564e-11;
          case 15: return 7.647163731819816475901131985788070444155100239756324412409068493724578380663036747692832348917005001661e-13;
          case 16: return 4.77947733238738529743820749111754402759693764984770275775566780857786148791439796730802021807312812603817894823185e-14;
          case 17: return 2.811457254345520763198945583010320016233492735204531033973922240339918522302587039592953069454781250610e-15;
          case 18: return 1.56192069685862264622163643500573334235194040844696168554106791129995473461254835532941837191932291700594083275550e-16;
          case 19: return 8.220635246624329716955981236872280749220738991826114134426673217368182813750254501733780904838541668452e-18;
          case 20: return 4.11031762331216485847799061843614037461036949591305706721333660868409140687512725086689045241927083422616008619870e-19;
          case 21: return 1.957294106339126123084757437350543035528747379006217651053969813659091146131012976603281167818700397250e-20;
          case 22: return 8.89679139245057328674889744250246834331248808639189841388168097117768702786824080274218712644863816932069282726993e-22;
          case 23: return 3.868170170630684037716911931522812323179342646257347136470296074425081316464452522931385707151581812748e-23;
          case 24: return 1.61173757109611834904871330480117180132472610260722797352929003101045054852685521788807737797982575531171971508513e-24;
          case 25: return 6.446950284384473396194853219204687205298904410428911894117160124041802194107420871552309511919303021246e-26;
          case 26: return 2.47959626322479746007494354584795661742265554247265842081429235540069315157977725828934981227665500817187648474635e-27;
          case 27: return 9.183689863795546148425716836473913397861687194343179336349230945928493153999175030701295601024648178414e-29;
          case 28: return 3.27988923706983791015204172731211192780774542655113547726758248068874755499970536810760557179451720657655619675444e-30;
          case 29: return 1.130996288644771693155876457693831699244050147086598440437097407134050881034381161416415714411902485026e-31;
          case 30: return 3.76998762881590564385292152564610566414683382362199480145699135711350293678127053805471904803967495008799562845338e-33;
          case 31: return 1.216125041553517949629974685692292149724785104394191871437739147455968689284280818727328725174088693576772e-34;
          case 32: return 3.80039075485474359259367089278841296788995345123184959824293483579990215401337755852290226616902716742741494803768e-36;
          case 33: return 1.151633562077195028058688149329822111481804076130863514619071162363606713337387138946334020051220353765883e-37;
          case 34: return 3.38715753552116184723143573332300621024060022391430445476197400695178445099231511454804123544476574637024505172698e-39;
          case 35: return 9.677592958631890992089816380922874886401714925469441299319925734147955574263757470137260672699330703914985e-41;
          case 36: return 2.68822026628663638669161566136746524622269859040817813869997937059665432618437707503812796463870297330971829502142e-42;
          case 37: return 7.265460179153071315382745030722879043845131325427508482972917217828795476173992094697643147672170198134373e-44;
          case 38: return 2.68822026628663638669161566136746524622269859040817813869997937059665432618437707503812796463870297330971829502142e-42;
          case 39: return 4.902469756513543397694159939759027694902247857913298571506691779911467932641020306813524391141815248403760e-47;
          case 40: return 1.22561743912838584942353998493975692372556196447832464287667294497786698316025507670338109778545381210094024465724e-48;
          case 41: return 2.989310827142404510789121914487212009086736498727621080187007182872846300390866040739953897037692224636439e-50;
          case 42: return 7.11740673129143931140267122496955240258746785411338352425477900684011023902587152557131880247069577294390385979818e-52;
          case 43: return 1.655210867742195188698295633713849395950573919561251982384832327172118660238574773388678791272254830917186e-53;
          case 44: return 7.11740673129143931140267122496955240258746785411338352425477900684011023902587152557131880247069577294390385979818e-52;
          case 45: return 8.359650847182803983324725422797219171467545048289151426186021854404639698174620067619589854910377933925186e-57;
          case 46: return 1.81731540156147912680972291799939547205816196701938074482304822921839993438578697122164996845877781172286664925242e-58;
          case 47: return 3.86662851396059388682919769787105419586842971706251222302776218982638283911869568345031908182718683345290776436687e-60;
          case 48: return 8.05547607075123726422749520389802957472589524388023379797450456213829758149728267385483142047330590302689117576431e-62;
          case 49: return 1.64397470831657903351581534773429174994406025385310893836214378819148930234638421915404722866802161286263085219679e-63;
          case 50: return 3.28794941663315806703163069546858349988812050770621787672428757638297860469276843830809445733604322572526170439359e-65;
      }

      return 1.0 / factorial(x);
  }
} // namespace bk

#endif // BKMATH_INV_FACTORIAL_H



